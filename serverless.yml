service: jlg

provider:
  name: aws
  region: us-east-1
  deploymentBucket: ${env:ARTIFACTS_BUCKET}

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  cloudfrontInvalidate:
    distributionIdKey: DistributionIdKey
    items:
      - "/*"

  s3Sync:
    - acl: public-read
      bucketName: ${env:DOMAIN_NAME}
      localDir: dist

resources:
  Mappings:
    Constants:
      CloudFront:
        HostedZoneId: Z2FDTNDATAQYW2

  Outputs:
    DistributionIdKey:
      Value:
        Ref: Distribution

  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:DOMAIN_NAME}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: {Ref: Bucket}
        PolicyDocument:
          Statement:
            - Action: ['s3:GetObject']
              Effect: Allow
              Principal:
                CanonicalUser: {Fn::GetAtt: CloudFrontOriginAccessIdentity.S3CanonicalUserId}
              Resource:
                - {Fn::Join: ['', ['arn:aws:s3:::', {Ref: Bucket}, '/*']]}

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: {Fn::Join: ['', ['access-identity-', {Ref: Bucket},'.s3.amazonaws.com']]}

    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${env:DOMAIN_NAME}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD]
            Compress: true
            DefaultTTL: 30
            ForwardedValues: {QueryString: true}
            MinTTL: 10
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: {Fn::Join: ['', [{Ref: Bucket}, '.s3.amazonaws.com']]}
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: {Fn::Join: ['', ['origin-access-identity/cloudfront/', {Ref: CloudFrontOriginAccessIdentity}]]}
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: ${env:CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only

    RecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${env:HOSTED_ZONE}.
        RecordSets:
          - Name: ${env:DOMAIN_NAME}.
            Type: A
            AliasTarget:
              DNSName: {Fn::GetAtt: Distribution.DomainName}
              HostedZoneId: {Fn::FindInMap: [Constants, CloudFront, HostedZoneId]}
          - Name: ${env:DOMAIN_NAME}.
            Type: AAAA
            AliasTarget:
              DNSName: {Fn::GetAtt: Distribution.DomainName}
              HostedZoneId: {Fn::FindInMap: [Constants, CloudFront, HostedZoneId]}
